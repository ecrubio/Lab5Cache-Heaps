"""
Elizabeth Rubio
Lab 5
Part A
"""

#Initial constructors
class Node:
    def __init__(self, key, value, next=None, prev=None):
        self.key = key
        self.value = value
        self.next = next
        self.prev = prev

class Cache:
    def __init__(self, capacity, head=None, tail=None):
        self.head = head
        self.tail = tail
        self.cache = dict()
        self.capacity = capacity
    
    #The node will always be palced in front of dummy node, if there are no
    #dummy nodes in place then they will be created
    def insert_first(self, curr_node):
        if self.head == None and self.tail == None:
            self.head = Node(-1, -1)
            self.tail = Node(-1, -1)
            self.head.next = self.tail
            self.tail.prev = self.head
        curr_node.next = self.head.next
        self.head.next = curr_node
        curr_node.prev = self.head
    
    #The node in question will be removed by changing the pointers        
    def removing(self, curr_node):
        curr_node.prev.next = curr_node.next
        curr_node.next.prev = curr_node.prev
    
    #If the key is present in the cache then the node will be removed then it
    #will be reincerted to the beginning of the list     
    def get(self, key):
        if key in self.cache:
            self.removing(self.cache[key])
            self.insert_first(self.cache[key])
            return self.cache[key].value
        return -1
    
    #The items will create a new node which then will be inserted in both the
    #linked list and the dictionary. If the lengeth exceeds the capacity then
    #the node is removed
    def put(self, key, value):
        new_node = Node(key, value)
        self.insert_first(new_node)
        self.cache[key] = new_node
        if len(self.cache) > self.capacity:
            self.removing(self.head.next)
            del self.cache[self.head.next.key]
    
    #this was used for debugging, it prints the items in cache
    def prints(self):
        for key in self.cache:
            print(self.cache[key].value, end='')
        print()
    
    #this returns the size of the cache
    def size(self):
        counter = 0
        for key in self.cache:
            counter += 1
        return counter
    
    #this is the max capacity of the cache which is established when making the
    #cache
    def max_capacity(self):
        return self.capacity
    
    
def main():
    #The test cases were taken form leetcode
    cache = Cache(2)
    cache.put(1, 1)
    cache.put(2, 2)
    print("Get 1:", cache.get(1)) 
    cache.prints()      
    cache.put(3, 3)       
    print("Get 2: ", cache.get(2))
    cache.prints()       
    cache.put(4, 4)    
    print("Get 1: ", cache.get(1)) 
    cache.prints()             
    print("Get 3: ", cache.get(3)) 
    cache.prints()       
    print("Get 4: ", cache.get(4))
    cache.prints()            
    print("Max capacity: ", cache.max_capacity())
    print("Size:", cache.size())
        
main()
